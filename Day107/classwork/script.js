let obj = {
    name: 'gabrieli',
    surname: 'molodini'
}

//JSON - ტექსტური ფორმატი, რომელიც 
//საშუალებას გვაძლევს იუზერმა და სერვერ,ა
//ერთმანეთს გაუზიარონ მონაცემები.
//როგორ მუშაობს ობიექტი მაგას გვეუბნება 

///creating a json object
let JSONObj = {
    'name' : 'gabrieli',
    'surname' : 'molodini'
}

console.log(obj)
console.log(JSONObj)
////////////////////////////////////////////////
//JSON - ჩაშენებული ობიექტი
console.log(JSON)

let strJson = JSON.stringify(JSONObj) 
//ჩაშენებული JSON-ის გამოყენებით , ვიყენებთ მის მეთოდს,stringify,რომელიც გაასტრინგებს ობიექტს 
//stringify - ობიექტს გარდაქმნის სტრინგად (იმისთის რომ ნაკლები მეხსიერება დაიკავოს ობიექტმა)
console.log(strJson)

console.log(typeof(strJson)) //string
console.log(typeof(JSONObj)) // OBJECT

//parse - გასტრინგებული ობიექტის , არაგასტრინგებულ ობიექტად გადაკეთება
console.log(JSON.parse(strJson))
/////////////////////////////
//asynchronous - ასინქრონიზაცია - როცა კოდის ყველა ხაზიე ერთდროულად სრულდება 

//XMLHttpRequest Object - AJAX იყენებს XMLHttp მოთხოვნას რო შექმნას მოთხოვნა,რომელიც უნდა გადაიგზავნოს ბექენდ სერვერთან
//ეს არის მარტივი და სტანდარტული გზა შევქმნათ  HTTP მოთხოვნა javascript-იდან რომ გვქონდეს კონტენტი და აბდეითის შესაძლებლობა  HTML ფაილის 

//AJAX - მოკლე ფორმა ასინქრონიზაციის . მონაცემების გაცვლა ბექენდთან ხდება ამის საშუალბით 
//ეს საშულებას აძლევს კოდის ნაწილებს რომ დააფდეითდდეს ასინქრონიზირებულად


//onreadystatechange - ეს ფროფერთ იგანსაზღვარვს ფუნქციას,რომელიც მაშინ იშვება, როცა readystate  იცვლება

//readystate - xmlhttp -ის მდგომარეობას გვატყობიდნებს readystate. გაიგზავნა, არ გაიგზავნა , შეფერხებაა თუ რამე სხვა
//ანუ xmlhttp -ის ამჟამინდელი მდგომარეობა

//xmlhttp - ბრაუზერში ჩაშენებული ობიექტი,რომლის საშუალბითაც ვქმნით მოთხოვნებს 
