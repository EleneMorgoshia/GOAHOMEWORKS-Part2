//ჯავასკრიპტის ძრავი
// ჯავასკრიპტის ძრავი არის პროგრამა რომელიც ასრულებს ჯავასკრიპტის კოდს
// ჯავასკრიპტის ძრავი არის ჩაშენებული ყველა თანამედროვე ბრაუზერში
// როდესაც ჯავასკრიპტის ფაილი იტვირთება ბრაუზერში ძრავა ასრულებს თითოეულ ხაზს ზემოდან ქვემოთ
// ჯავასკრიპტის ძრავი აანალიზებს კოდს ხაზ ხაზ და გარდაქმნის მანქანურ კოდად შემდეგ კი სრულდება
// ყველა ბრაუზერში არის ჯავასკრიპტის განსხვავებული ძრავი




// კომპილაცია და ინტერპრეტაცია პროგრამირებაში

// კომპილაციის როლი: - კოდის გარდაქმნის პროცესი მაქნანურ კოდად 
//    1. კომპილერები კითხულობენ კოდს, შედეგი არის შესრულებადი კოდი
//    2. თარგმნის პროგრამას რომელიც დაწერილია higher level language(js) ინსტრუქციებად, ის გარდაიქმნება ისეთი ტექსტის ფორმატად რომელსაც cpu პროცესორი მიხვდება და გაიგებს
//    3. კომპილაციის პროცესი შედარებით რთულია ამიტომ ის ხარჯავს ძალიან ბევრ დროს ანალიზში და პროგრამის დამუშავებაში
//    4. შესრულების შედეგი არის მანქანური კონკრეტულად ორობითი კოდის ფორმა binary code

// ინტერპრეტაციის როლი:
//    1. ინტერპრეტერი გარდაქმნის კოდს ხაზ ხაზ კოდის გაშვების დროს
//    2. ინტერპრეტერი მთლიანად თარგნის პროგრამას რომელიც დაწერილია higher level language(js)მანქანურ კოდში machine level language 
//    3. ინტერპრეტერი იძლევა შეფასების და შეცვლის საშუალებას მანამ სანამ პროგრამა შესრულდება
//    4. ჭირდება შედარებით ნაკლები დრო ანალიზში და პროგრამის დამუშავებაში
//    5. პროგრამა სრულდება შედარებით ნელა კომპილერთან შედარებით




// ზოგი ფიქრობს რომ ჯავასკრიპტი არის ინტერპრეტირებული ენა მაგრამ რეალურად ასე არარის ჯავასკრიპტი არის შერეული ინტერპრეტერიც და კომპილატორიც რომელსაც ქვია just-in-time კომპილაცია შემოკლებით JIT 


// JIT: - just in time კომპილაცია - (ორივეა - როგროც კომპილერები ასევე ინტერპრეტატორები )
//     Jit კომპილერი მუშაობს დინამიურად გარდაქმნის ჯავასკრიპტის კოდს გაშვების დროს მანქანურ კოდად საშუალებას აძლევს შესრულდეს უფრო სწრაფად ვიდრე ინტერპრეტორი 

// ----------------------------------------
// მეხსიერება

// მეხსიერების სიცოცხლის წრე 

// ჩვენ გვაქვს სამი ნაწილი 